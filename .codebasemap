{
  "metadata": {
    "version": 1,
    "root": "/Users/carl/Development/agents/cc-acp",
    "createdAt": "2025-08-29T22:05:50.193Z",
    "updatedAt": "2025-08-29T22:05:50.193Z",
    "totalFiles": 27
  },
  "tree": {
    "name": "cc-acp",
    "type": "dir",
    "children": [
      {
        "name": "examples",
        "type": "dir",
        "children": [
          {
            "name": "acp",
            "type": "dir",
            "children": [
              {
                "name": "agent.ts",
                "type": "file"
              },
              {
                "name": "client.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "gemini",
            "type": "dir",
            "children": [
              {
                "name": "acp.ts",
                "type": "file"
              },
              {
                "name": "file-stystem-service.ts",
                "type": "file"
              },
              {
                "name": "schema.ts",
                "type": "file"
              },
              {
                "name": "zed-integration.ts",
                "type": "file"
              }
            ]
          }
        ]
      },
      {
        "name": "src",
        "type": "dir",
        "children": [
          {
            "name": "__tests__",
            "type": "dir",
            "children": [
              {
                "name": "cli.test.ts",
                "type": "file"
              },
              {
                "name": "filesystem.test.ts",
                "type": "file"
              },
              {
                "name": "performance.test.ts",
                "type": "file"
              },
              {
                "name": "protocol-methods.test.ts",
                "type": "file"
              },
              {
                "name": "schemas.test.ts",
                "type": "file"
              },
              {
                "name": "setup.test.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "bridge",
            "type": "dir",
            "children": [
              {
                "name": "agent.ts",
                "type": "file"
              },
              {
                "name": "permissions.ts",
                "type": "file"
              },
              {
                "name": "session.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "files",
            "type": "dir",
            "children": [
              {
                "name": "filesystem.ts",
                "type": "file"
              },
              {
                "name": "resolver.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "protocol",
            "type": "dir",
            "children": [
              {
                "name": "connection.ts",
                "type": "file"
              },
              {
                "name": "schemas.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "utils",
            "type": "dir",
            "children": [
              {
                "name": "errors.ts",
                "type": "file"
              },
              {
                "name": "path.ts",
                "type": "file"
              },
              {
                "name": "performance.ts",
                "type": "file"
              },
              {
                "name": "types.ts",
                "type": "file"
              }
            ]
          },
          {
            "name": "index.ts",
            "type": "file"
          }
        ]
      },
      {
        "name": "tests",
        "type": "dir",
        "children": [
          {
            "name": "integration",
            "type": "dir",
            "children": [
              {
                "name": "protocol.test.ts",
                "type": "file"
              }
            ]
          }
        ]
      },
      {
        "name": "eslint.config.js",
        "type": "file"
      },
      {
        "name": "jest.config.js",
        "type": "file"
      }
    ]
  },
  "nodes": [
    "eslint.config.js",
    "examples/acp/agent.ts",
    "examples/acp/client.ts",
    "examples/gemini/acp.ts",
    "examples/gemini/file-stystem-service.ts",
    "examples/gemini/schema.ts",
    "examples/gemini/zed-integration.ts",
    "jest.config.js",
    "src/__tests__/cli.test.ts",
    "src/__tests__/filesystem.test.ts",
    "src/__tests__/performance.test.ts",
    "src/__tests__/protocol-methods.test.ts",
    "src/__tests__/schemas.test.ts",
    "src/__tests__/setup.test.ts",
    "src/bridge/agent.ts",
    "src/bridge/permissions.ts",
    "src/bridge/session.ts",
    "src/files/filesystem.ts",
    "src/files/resolver.ts",
    "src/index.ts",
    "src/protocol/connection.ts",
    "src/protocol/schemas.ts",
    "src/utils/errors.ts",
    "src/utils/path.ts",
    "src/utils/performance.ts",
    "src/utils/types.ts",
    "tests/integration/protocol.test.ts"
  ],
  "edges": [
    {
      "from": "examples/gemini/acp.ts",
      "to": "examples/gemini/schema.ts"
    },
    {
      "from": "examples/gemini/file-stystem-service.ts",
      "to": "examples/gemini/acp.ts"
    },
    {
      "from": "examples/gemini/zed-integration.ts",
      "to": "examples/gemini/acp.ts"
    },
    {
      "from": "src/__tests__/filesystem.test.ts",
      "to": "src/files/filesystem.ts"
    },
    {
      "from": "src/__tests__/filesystem.test.ts",
      "to": "src/files/resolver.ts"
    },
    {
      "from": "src/__tests__/filesystem.test.ts",
      "to": "src/utils/types.ts"
    },
    {
      "from": "src/__tests__/performance.test.ts",
      "to": "src/utils/performance.ts"
    },
    {
      "from": "src/__tests__/protocol-methods.test.ts",
      "to": "src/bridge/agent.ts"
    },
    {
      "from": "src/__tests__/protocol-methods.test.ts",
      "to": "src/bridge/session.ts"
    },
    {
      "from": "src/__tests__/schemas.test.ts",
      "to": "src/protocol/schemas.ts"
    },
    {
      "from": "src/bridge/agent.ts",
      "to": "src/bridge/permissions.ts"
    },
    {
      "from": "src/bridge/agent.ts",
      "to": "src/bridge/session.ts"
    },
    {
      "from": "src/bridge/agent.ts",
      "to": "src/files/filesystem.ts"
    },
    {
      "from": "src/bridge/agent.ts",
      "to": "src/protocol/connection.ts"
    },
    {
      "from": "src/bridge/agent.ts",
      "to": "src/utils/errors.ts"
    },
    {
      "from": "src/bridge/agent.ts",
      "to": "src/utils/performance.ts"
    },
    {
      "from": "src/bridge/permissions.ts",
      "to": "src/protocol/schemas.ts"
    },
    {
      "from": "src/bridge/permissions.ts",
      "to": "src/utils/types.ts"
    },
    {
      "from": "src/bridge/session.ts",
      "to": "src/bridge/permissions.ts"
    },
    {
      "from": "src/bridge/session.ts",
      "to": "src/files/filesystem.ts"
    },
    {
      "from": "src/bridge/session.ts",
      "to": "src/files/resolver.ts"
    },
    {
      "from": "src/bridge/session.ts",
      "to": "src/protocol/schemas.ts"
    },
    {
      "from": "src/bridge/session.ts",
      "to": "src/utils/performance.ts"
    },
    {
      "from": "src/bridge/session.ts",
      "to": "src/utils/types.ts"
    },
    {
      "from": "src/files/filesystem.ts",
      "to": "src/utils/errors.ts"
    },
    {
      "from": "src/files/filesystem.ts",
      "to": "src/utils/types.ts"
    },
    {
      "from": "src/files/resolver.ts",
      "to": "src/utils/errors.ts"
    },
    {
      "from": "src/files/resolver.ts",
      "to": "src/utils/types.ts"
    },
    {
      "from": "src/index.ts",
      "to": "src/bridge/agent.ts"
    },
    {
      "from": "src/index.ts",
      "to": "src/protocol/connection.ts"
    },
    {
      "from": "src/index.ts",
      "to": "src/protocol/schemas.ts"
    },
    {
      "from": "src/protocol/connection.ts",
      "to": "src/utils/errors.ts"
    },
    {
      "from": "src/utils/types.ts",
      "to": "src/protocol/schemas.ts"
    },
    {
      "from": "src/utils/types.ts",
      "to": "src/utils/errors.ts"
    },
    {
      "from": "src/utils/types.ts",
      "to": "src/utils/path.ts"
    }
  ],
  "files": {
    "eslint.config.js": {
      "imports": [],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "js",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "tseslint",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "tsParser",
          "initKind": "unknown",
          "isExported": false
        }
      ]
    },
    "examples/acp/agent.ts": {
      "imports": [
        {
          "from": "../acp.js",
          "kind": "import",
          "imported": [
            "AgentSideConnection",
            "Agent",
            "PROTOCOL_VERSION"
          ]
        },
        {
          "from": "../schema.js",
          "kind": "import",
          "isNamespace": true
        },
        {
          "from": "node:stream/web",
          "kind": "import",
          "imported": [
            "WritableStream",
            "ReadableStream"
          ]
        },
        {
          "from": "node:stream",
          "kind": "import",
          "imported": [
            "Readable",
            "Writable"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [
        {
          "name": "ExampleAgent",
          "isExported": false,
          "methods": [
            {
              "name": "initialize",
              "params": [
                {
                  "name": "params",
                  "type": "schema.InitializeRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<schema.InitializeResponse>"
            },
            {
              "name": "newSession",
              "params": [
                {
                  "name": "params",
                  "type": "schema.NewSessionRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<schema.NewSessionResponse>"
            },
            {
              "name": "authenticate",
              "params": [
                {
                  "name": "params",
                  "type": "schema.AuthenticateRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>"
            },
            {
              "name": "prompt",
              "params": [
                {
                  "name": "params",
                  "type": "schema.PromptRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<schema.PromptResponse>"
            },
            {
              "name": "simulateTurn",
              "params": [
                {
                  "name": "sessionId",
                  "type": "string"
                },
                {
                  "name": "abortSignal",
                  "type": "AbortSignal"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "simulateModelInteraction",
              "params": [
                {
                  "name": "abortSignal",
                  "type": "AbortSignal"
                }
              ],
              "isAsync": false,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "cancel",
              "params": [
                {
                  "name": "params",
                  "type": "schema.CancelNotification"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>"
            }
          ],
          "properties": [
            {
              "name": "connection",
              "type": "AgentSideConnection",
              "isPrivate": true
            },
            {
              "name": "sessions",
              "type": "Map<string, AgentSession>",
              "isPrivate": true
            }
          ],
          "implements": [
            "Agent"
          ]
        }
      ],
      "constants": [
        {
          "name": "input",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "output",
          "initKind": "unknown",
          "isExported": false
        }
      ]
    },
    "examples/acp/client.ts": {
      "imports": [
        {
          "from": "node:child_process",
          "kind": "import"
        },
        {
          "from": "node:url",
          "kind": "import"
        },
        {
          "from": "node:path",
          "kind": "import"
        },
        {
          "from": "node:stream/web",
          "kind": "import"
        },
        {
          "from": "node:stream",
          "kind": "import"
        },
        {
          "from": "node:readline/promises",
          "kind": "import"
        },
        {
          "from": "../acp.js",
          "kind": "import"
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "examples/gemini/acp.ts": {
      "imports": [
        {
          "from": "zod",
          "kind": "import",
          "imported": [
            "z"
          ]
        },
        {
          "from": "node:os",
          "kind": "import",
          "imported": [
            "EOL"
          ]
        },
        {
          "from": "./schema.js",
          "kind": "import",
          "isNamespace": true
        },
        {
          "from": "./schema.js",
          "kind": "export"
        },
        {
          "from": "node:stream/web",
          "kind": "import",
          "imported": [
            "WritableStream",
            "ReadableStream"
          ]
        }
      ],
      "dependencies": [
        "examples/gemini/schema.ts"
      ],
      "functions": [],
      "classes": [
        {
          "name": "AgentSideConnection",
          "isExported": true,
          "methods": [
            {
              "name": "sessionUpdate",
              "params": [
                {
                  "name": "params",
                  "type": "schema.SessionNotification"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>"
            },
            {
              "name": "requestPermission",
              "params": [
                {
                  "name": "params",
                  "type": "schema.RequestPermissionRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<schema.RequestPermissionResponse>"
            },
            {
              "name": "readTextFile",
              "params": [
                {
                  "name": "params",
                  "type": "schema.ReadTextFileRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<schema.ReadTextFileResponse>"
            },
            {
              "name": "writeTextFile",
              "params": [
                {
                  "name": "params",
                  "type": "schema.WriteTextFileRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<schema.WriteTextFileResponse>"
            }
          ],
          "properties": [],
          "implements": [
            "Client"
          ]
        },
        {
          "name": "Connection",
          "isExported": false,
          "methods": [
            {
              "name": "sendRequest",
              "params": [
                {
                  "name": "method",
                  "type": "string"
                },
                {
                  "name": "params",
                  "type": "Req",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<Resp>"
            },
            {
              "name": "sendNotification",
              "params": [
                {
                  "name": "method",
                  "type": "string"
                },
                {
                  "name": "params",
                  "type": "N",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>"
            }
          ],
          "properties": []
        },
        {
          "name": "RequestError",
          "isExported": true,
          "methods": [
            {
              "name": "parseError",
              "params": [
                {
                  "name": "details",
                  "type": "string",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "RequestError",
              "isStatic": true
            },
            {
              "name": "invalidRequest",
              "params": [
                {
                  "name": "details",
                  "type": "string",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "RequestError",
              "isStatic": true
            },
            {
              "name": "methodNotFound",
              "params": [
                {
                  "name": "details",
                  "type": "string",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "RequestError",
              "isStatic": true
            },
            {
              "name": "invalidParams",
              "params": [
                {
                  "name": "details",
                  "type": "string",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "RequestError",
              "isStatic": true
            },
            {
              "name": "internalError",
              "params": [
                {
                  "name": "details",
                  "type": "string",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "RequestError",
              "isStatic": true
            },
            {
              "name": "authRequired",
              "params": [
                {
                  "name": "details",
                  "type": "string",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "RequestError",
              "isStatic": true
            },
            {
              "name": "toResult",
              "params": [],
              "isAsync": false,
              "returnType": "Result<T>"
            }
          ],
          "properties": [
            {
              "name": "data",
              "type": "{ details?: string }"
            }
          ],
          "extends": "Error"
        }
      ],
      "constants": []
    },
    "examples/gemini/file-stystem-service.ts": {
      "imports": [
        {
          "from": "@google/gemini-cli-core",
          "kind": "import",
          "imported": [
            "FileSystemService"
          ]
        },
        {
          "from": "./acp.js",
          "kind": "import",
          "isNamespace": true
        }
      ],
      "dependencies": [
        "examples/gemini/acp.ts"
      ],
      "functions": [],
      "classes": [
        {
          "name": "AcpFileSystemService",
          "isExported": true,
          "methods": [
            {
              "name": "readTextFile",
              "params": [
                {
                  "name": "filePath",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<string>"
            },
            {
              "name": "writeTextFile",
              "params": [
                {
                  "name": "filePath",
                  "type": "string"
                },
                {
                  "name": "content",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>"
            }
          ],
          "properties": [],
          "implements": [
            "FileSystemService"
          ]
        }
      ],
      "constants": []
    },
    "examples/gemini/schema.ts": {
      "imports": [
        {
          "from": "zod",
          "kind": "import",
          "imported": [
            "z"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "AGENT_METHODS",
          "initKind": "object",
          "isExported": true
        },
        {
          "name": "CLIENT_METHODS",
          "initKind": "object",
          "isExported": true
        },
        {
          "name": "PROTOCOL_VERSION",
          "initKind": "literal",
          "isExported": true
        },
        {
          "name": "writeTextFileRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "readTextFileRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "permissionOptionKindSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "roleSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "textResourceContentsSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "blobResourceContentsSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolKindSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolCallStatusSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "writeTextFileResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "readTextFileResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "requestPermissionOutcomeSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "cancelNotificationSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "authenticateRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "authenticateResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "newSessionResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "loadSessionResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "stopReasonSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "promptResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolCallLocationSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "planEntrySchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "permissionOptionSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "annotationsSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "requestPermissionResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "fileSystemCapabilitySchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "envVariableSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "mcpServerSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "promptCapabilitiesSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "agentCapabilitiesSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "authMethodSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "clientResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "clientNotificationSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "embeddedResourceResourceSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "newSessionRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "loadSessionRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "initializeResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "contentBlockSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolCallContentSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolCallSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "clientCapabilitiesSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "promptRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "sessionUpdateSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "agentResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "requestPermissionRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "initializeRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "sessionNotificationSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "clientRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "agentRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "agentNotificationSchema",
          "initKind": "unknown",
          "isExported": true
        }
      ]
    },
    "examples/gemini/zed-integration.ts": {
      "imports": [
        {
          "from": "node:stream/web",
          "kind": "import"
        },
        {
          "from": "./acp.js",
          "kind": "import"
        },
        {
          "from": "./fileSystemService.js",
          "kind": "import"
        },
        {
          "from": "node:stream",
          "kind": "import"
        },
        {
          "from": "@google/genai",
          "kind": "import"
        },
        {
          "from": "../config/settings.js",
          "kind": "import"
        },
        {
          "from": "../config/settings.js",
          "kind": "import"
        },
        {
          "from": "node:fs/promises",
          "kind": "import"
        },
        {
          "from": "node:path",
          "kind": "import"
        },
        {
          "from": "zod",
          "kind": "import"
        },
        {
          "from": "node:crypto",
          "kind": "import"
        },
        {
          "from": "../config/extension.js",
          "kind": "import"
        },
        {
          "from": "../config/config.js",
          "kind": "import"
        },
        {
          "from": "../config/config.js",
          "kind": "import"
        }
      ],
      "dependencies": [
        "examples/gemini/acp.ts"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "jest.config.js": {
      "imports": [],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "src/__tests__/cli.test.ts": {
      "imports": [
        {
          "from": "fs",
          "kind": "import",
          "isNamespace": true
        },
        {
          "from": "path",
          "kind": "import",
          "isNamespace": true
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "getTestVersion",
          "params": [],
          "isAsync": false,
          "isExported": false,
          "returnType": "string"
        },
        {
          "name": "getTestHelpText",
          "params": [],
          "isAsync": false,
          "isExported": false,
          "returnType": "string"
        },
        {
          "name": "parseTestArgs",
          "params": [
            {
              "name": "argv",
              "type": "string[]"
            }
          ],
          "isAsync": false,
          "isExported": false,
          "returnType": "{ debug?: boolean; config?: string; version?: boolean; help?: boolean }"
        },
        {
          "name": "validateTestEnvironment",
          "params": [],
          "isAsync": false,
          "isExported": false,
          "returnType": "void"
        }
      ],
      "classes": [],
      "constants": []
    },
    "src/__tests__/filesystem.test.ts": {
      "imports": [
        {
          "from": "../files/filesystem.js",
          "kind": "import"
        },
        {
          "from": "../files/resolver.js",
          "kind": "import"
        },
        {
          "from": "../utils/types.js",
          "kind": "import"
        },
        {
          "from": "fs/promises",
          "kind": "import"
        },
        {
          "from": "path",
          "kind": "import"
        },
        {
          "from": "os",
          "kind": "import"
        },
        {
          "from": "../utils/types.js",
          "kind": "dynamic-import"
        }
      ],
      "dependencies": [
        "src/files/filesystem.ts",
        "src/files/resolver.ts",
        "src/utils/types.ts"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "src/__tests__/performance.test.ts": {
      "imports": [
        {
          "from": "../utils/performance.js",
          "kind": "import",
          "imported": [
            "PerformanceMonitor",
            "MemoryManager",
            "StreamBuffer"
          ]
        }
      ],
      "dependencies": [
        "src/utils/performance.ts"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "src/__tests__/protocol-methods.test.ts": {
      "imports": [
        {
          "from": "../bridge/agent.js",
          "kind": "import",
          "imported": [
            "ClaudeACPAgent"
          ]
        },
        {
          "from": "stream",
          "kind": "import",
          "imported": [
            "Readable",
            "Writable",
            "PassThrough"
          ]
        },
        {
          "from": "../bridge/session.js",
          "kind": "import",
          "imported": [
            "SessionManager"
          ]
        }
      ],
      "dependencies": [
        "src/bridge/agent.ts",
        "src/bridge/session.ts"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "src/__tests__/schemas.test.ts": {
      "imports": [
        {
          "from": "../protocol/schemas",
          "kind": "import",
          "imported": [
            "contentBlockSchema",
            "sessionUpdateSchema",
            "initializeRequestSchema",
            "initializeResponseSchema",
            "newSessionRequestSchema",
            "promptRequestSchema",
            "requestPermissionRequestSchema",
            "readTextFileRequestSchema",
            "writeTextFileRequestSchema",
            "ContentBlock",
            "SessionUpdate",
            "InitializeRequest"
          ]
        }
      ],
      "dependencies": [
        "src/protocol/schemas.ts"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "src/__tests__/setup.test.ts": {
      "imports": [],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "src/bridge/agent.ts": {
      "imports": [
        {
          "from": "crypto",
          "kind": "import"
        },
        {
          "from": "stream",
          "kind": "import"
        },
        {
          "from": "../protocol/connection.js",
          "kind": "import"
        },
        {
          "from": "../files/filesystem.js",
          "kind": "import"
        },
        {
          "from": "./session.js",
          "kind": "import"
        },
        {
          "from": "./permissions.js",
          "kind": "import"
        },
        {
          "from": "../utils/errors.js",
          "kind": "import"
        },
        {
          "from": "zod",
          "kind": "import"
        },
        {
          "from": "@anthropic-ai/claude-code",
          "kind": "import"
        },
        {
          "from": "lru-cache",
          "kind": "import"
        },
        {
          "from": "../utils/performance.js",
          "kind": "import"
        }
      ],
      "dependencies": [
        "src/bridge/permissions.ts",
        "src/bridge/session.ts",
        "src/files/filesystem.ts",
        "src/protocol/connection.ts",
        "src/utils/errors.ts",
        "src/utils/performance.ts"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "src/bridge/permissions.ts": {
      "imports": [
        {
          "from": "../utils/types.js",
          "kind": "import",
          "imported": [
            "ACPClient",
            "PermissionDecision",
            "ToolCall"
          ]
        },
        {
          "from": "../protocol/schemas.js",
          "kind": "import",
          "imported": [
            "PermissionOption",
            "toolKindSchema"
          ]
        }
      ],
      "dependencies": [
        "src/protocol/schemas.ts",
        "src/utils/types.ts"
      ],
      "functions": [],
      "classes": [
        {
          "name": "PermissionManager",
          "isExported": true,
          "methods": [
            {
              "name": "checkPermission",
              "params": [
                {
                  "name": "tool",
                  "type": "ToolCall"
                },
                {
                  "name": "client",
                  "type": "ACPClient"
                },
                {
                  "name": "sessionId",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<PermissionDecision>"
            },
            {
              "name": "buildPermissionOptions",
              "params": [
                {
                  "name": "tool",
                  "type": "ToolCall"
                }
              ],
              "isAsync": false,
              "returnType": "PermissionOption[]",
              "isPrivate": true
            },
            {
              "name": "getCacheKey",
              "params": [
                {
                  "name": "tool",
                  "type": "ToolCall"
                }
              ],
              "isAsync": false,
              "returnType": "string",
              "isPrivate": true
            },
            {
              "name": "isCacheValid",
              "params": [
                {
                  "name": "cached",
                  "type": "PermissionDecision & { timestamp: number }"
                },
                {
                  "name": "tool",
                  "type": "ToolCall"
                }
              ],
              "isAsync": false,
              "returnType": "boolean",
              "isPrivate": true
            },
            {
              "name": "mapToolKind",
              "params": [
                {
                  "name": "tool",
                  "type": "ToolCall"
                }
              ],
              "isAsync": false,
              "returnType": "'read' | 'edit' | 'delete' | 'move' | 'search' | 'execute' | 'think' | 'fetch' | 'other'",
              "isPrivate": true
            },
            {
              "name": "buildToolContentText",
              "params": [
                {
                  "name": "tool",
                  "type": "ToolCall"
                }
              ],
              "isAsync": false,
              "returnType": "string",
              "isPrivate": true
            },
            {
              "name": "buildToolContent",
              "params": [
                {
                  "name": "tool",
                  "type": "ToolCall"
                }
              ],
              "isAsync": false,
              "returnType": "ToolContent",
              "isPrivate": true
            },
            {
              "name": "processResponse",
              "params": [
                {
                  "name": "response",
                  "type": "PermissionResponse"
                }
              ],
              "isAsync": false,
              "returnType": "PermissionDecision",
              "isPrivate": true
            },
            {
              "name": "clearCache",
              "params": [],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "invalidateCache",
              "params": [
                {
                  "name": "pattern",
                  "type": "string"
                }
              ],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "updateContext",
              "params": [
                {
                  "name": "context",
                  "type": "string"
                }
              ],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "getCacheStats",
              "params": [],
              "isAsync": false,
              "returnType": "{ total: number; always: number; never: number; once: number }"
            },
            {
              "name": "dispose",
              "params": [],
              "isAsync": false,
              "returnType": "void"
            }
          ],
          "properties": [
            {
              "name": "cache",
              "isPrivate": true
            },
            {
              "name": "CACHE_TTL",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "sessionContext",
              "type": "string",
              "isPrivate": true
            }
          ]
        }
      ],
      "constants": []
    },
    "src/bridge/session.ts": {
      "imports": [
        {
          "from": "crypto",
          "kind": "import",
          "imported": [
            "randomUUID"
          ]
        },
        {
          "from": "../files/filesystem.js",
          "kind": "import",
          "imported": [
            "ACPFileSystem"
          ]
        },
        {
          "from": "../files/resolver.js",
          "kind": "import",
          "imported": [
            "FileResolver"
          ]
        },
        {
          "from": "../utils/types.js",
          "kind": "import",
          "imported": [
            "ClaudeSDK",
            "Config",
            "FileSystemService",
            "ACPClient",
            "Message",
            "PermissionDecision",
            "ToolCall",
            "ToolResult",
            "ContentBlock",
            "ResolvedContent",
            "ClaudeMessage"
          ]
        },
        {
          "from": "../protocol/schemas.js",
          "kind": "import",
          "imported": [
            "PromptRequest",
            "PromptResponse"
          ]
        },
        {
          "from": "./permissions.js",
          "kind": "import",
          "imported": [
            "PermissionManager"
          ]
        },
        {
          "from": "../utils/performance.js",
          "kind": "import",
          "imported": [
            "StreamBuffer",
            "globalMemoryManager"
          ]
        }
      ],
      "dependencies": [
        "src/bridge/permissions.ts",
        "src/files/filesystem.ts",
        "src/files/resolver.ts",
        "src/protocol/schemas.ts",
        "src/utils/performance.ts",
        "src/utils/types.ts"
      ],
      "functions": [],
      "classes": [
        {
          "name": "SessionManager",
          "isExported": true,
          "methods": [
            {
              "name": "createSession",
              "params": [
                {
                  "name": "sessionId",
                  "type": "string"
                },
                {
                  "name": "config",
                  "type": "Config"
                },
                {
                  "name": "fileSystemService",
                  "type": "FileSystemService"
                },
                {
                  "name": "claudeSDK",
                  "type": "ClaudeSDK"
                },
                {
                  "name": "acpClient",
                  "type": "ACPClient"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<Session>"
            },
            {
              "name": "getSession",
              "params": [
                {
                  "name": "sessionId",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<Session | null>"
            },
            {
              "name": "destroySession",
              "params": [
                {
                  "name": "sessionId",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>"
            },
            {
              "name": "destroyAllSessions",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<void>"
            },
            {
              "name": "getAllSessions",
              "params": [],
              "isAsync": false,
              "returnType": "Session[]"
            },
            {
              "name": "getSessionCount",
              "params": [],
              "isAsync": false,
              "returnType": "number"
            },
            {
              "name": "dispose",
              "params": [],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "cleanupExpiredSessions",
              "params": [],
              "isAsync": false,
              "returnType": "void",
              "isPrivate": true
            },
            {
              "name": "checkMemoryUsage",
              "params": [],
              "isAsync": false,
              "returnType": "void",
              "isPrivate": true
            },
            {
              "name": "performMemoryCleanup",
              "params": [],
              "isAsync": false,
              "returnType": "void",
              "isPrivate": true
            }
          ],
          "properties": [
            {
              "name": "sessions",
              "isPrivate": true
            },
            {
              "name": "maxSessions",
              "type": "number",
              "isPrivate": true
            },
            {
              "name": "sessionTimeoutMs",
              "type": "number",
              "isPrivate": true
            },
            {
              "name": "cleanupInterval",
              "type": "NodeJS.Timeout",
              "isPrivate": true
            },
            {
              "name": "memoryStats",
              "isPrivate": true
            }
          ]
        },
        {
          "name": "Session",
          "isExported": true,
          "methods": [
            {
              "name": "prompt",
              "params": [
                {
                  "name": "request",
                  "type": "PromptRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<PromptResponse>"
            },
            {
              "name": "handleToolCall",
              "params": [
                {
                  "name": "tool",
                  "type": "ToolCall"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "buildPromptWithContext",
              "params": [
                {
                  "name": "resolved",
                  "type": "ResolvedContent[]"
                }
              ],
              "isAsync": false,
              "returnType": "string",
              "isPrivate": true
            },
            {
              "name": "formatMessageContent",
              "params": [
                {
                  "name": "content",
                  "type": "string | ContentBlock[]"
                }
              ],
              "isAsync": false,
              "returnType": "string",
              "isPrivate": true
            },
            {
              "name": "processChunk",
              "params": [
                {
                  "name": "chunk",
                  "type": "ClaudeMessage"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<{ contentBlock?: ContentBlock; content?: string }>",
              "isPrivate": true
            },
            {
              "name": "bufferStreamUpdate",
              "params": [
                {
                  "name": "update",
                  "type": "Parameters<ACPClient['sessionUpdate']>[0]"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "handleBufferOverflow",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "isValidStreamUpdate",
              "params": [
                {
                  "name": "update",
                  "type": "unknown"
                }
              ],
              "isAsync": false,
              "returnType": "update is Parameters<ACPClient['sessionUpdate']>[0]",
              "isPrivate": true
            },
            {
              "name": "isErrorUpdate",
              "params": [
                {
                  "name": "update",
                  "type": "Parameters<ACPClient['sessionUpdate']>[0]"
                }
              ],
              "isAsync": false,
              "returnType": "boolean",
              "isPrivate": true
            },
            {
              "name": "isToolCallUpdate",
              "params": [
                {
                  "name": "update",
                  "type": "Parameters<ACPClient['sessionUpdate']>[0]"
                }
              ],
              "isAsync": false,
              "returnType": "boolean",
              "isPrivate": true
            },
            {
              "name": "isAgentMessage",
              "params": [
                {
                  "name": "update",
                  "type": "Parameters<ACPClient['sessionUpdate']>[0]"
                }
              ],
              "isAsync": false,
              "returnType": "boolean",
              "isPrivate": true
            },
            {
              "name": "flushStreamBuffer",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "mapToolKind",
              "params": [
                {
                  "name": "toolName",
                  "type": "string"
                }
              ],
              "isAsync": false,
              "returnType": "'read' | 'edit' | 'delete' | 'move' | 'search' | 'execute' | 'think' | 'fetch' | 'other'",
              "isPrivate": true
            },
            {
              "name": "buildToolContent",
              "params": [
                {
                  "name": "tool",
                  "type": "ToolCall"
                }
              ],
              "isAsync": false,
              "returnType": "Array<{ type: 'content', content: ContentBlock } | { type: 'diff', path: string, oldText?: string | null, newText: string }>",
              "isPrivate": true
            },
            {
              "name": "formatToolResult",
              "params": [
                {
                  "name": "result",
                  "type": "ToolResult"
                }
              ],
              "isAsync": false,
              "returnType": "Array<{ type: 'content', content: ContentBlock } | { type: 'diff', path: string, oldText?: string | null, newText: string }>",
              "isPrivate": true
            },
            {
              "name": "cleanupErrorState",
              "params": [
                {
                  "name": "reason",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "recoverFromError",
              "params": [
                {
                  "name": "errorMessage",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "checkPermission",
              "params": [
                {
                  "name": "tool",
                  "type": "ToolCall"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<PermissionDecision>",
              "isPrivate": true
            },
            {
              "name": "cancel",
              "params": [],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "updateLastUsed",
              "params": [],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "isExpired",
              "params": [
                {
                  "name": "currentTime",
                  "type": "number",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "boolean"
            },
            {
              "name": "getAbortController",
              "params": [],
              "isAsync": false,
              "returnType": "AbortController"
            },
            {
              "name": "getAge",
              "params": [],
              "isAsync": false,
              "returnType": "number"
            },
            {
              "name": "getIdleTime",
              "params": [],
              "isAsync": false,
              "returnType": "number"
            },
            {
              "name": "getConversationHistory",
              "params": [],
              "isAsync": false,
              "returnType": "Message[]"
            },
            {
              "name": "clearHistory",
              "params": [],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "manageConversationMemory",
              "params": [],
              "isAsync": false,
              "returnType": "void",
              "isPrivate": true
            },
            {
              "name": "checkSessionMemory",
              "params": [],
              "isAsync": false,
              "returnType": "void",
              "isPrivate": true
            },
            {
              "name": "toJSON",
              "params": [],
              "isAsync": false
            },
            {
              "name": "dispose",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<void>"
            }
          ],
          "properties": [
            {
              "name": "config",
              "type": "Config",
              "isReadonly": true
            },
            {
              "name": "fileSystem",
              "type": "ACPFileSystem",
              "isReadonly": true
            },
            {
              "name": "claudeSDK",
              "type": "ClaudeSDK",
              "isReadonly": true
            },
            {
              "name": "acpClient",
              "type": "ACPClient",
              "isPrivate": true
            },
            {
              "name": "createdAt",
              "type": "Date",
              "isPrivate": true
            },
            {
              "name": "lastUsed",
              "type": "Date"
            },
            {
              "name": "sessionTimeoutMs",
              "type": "number",
              "isPrivate": true
            },
            {
              "name": "abortController",
              "type": "AbortController",
              "isPrivate": true
            },
            {
              "name": "disposed",
              "isPrivate": true
            },
            {
              "name": "conversationHistory",
              "type": "Message[]",
              "isPrivate": true
            },
            {
              "name": "pendingPrompt",
              "type": "AbortController | null",
              "isPrivate": true
            },
            {
              "name": "fileResolver",
              "type": "FileResolver",
              "isPrivate": true
            },
            {
              "name": "streamBuffer",
              "type": "unknown[]",
              "isPrivate": true
            },
            {
              "name": "STREAM_BUFFER_SIZE",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "MAX_BUFFER_SIZE",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "STREAM_FLUSH_INTERVAL",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "streamFlushTimer",
              "type": "NodeJS.Timeout | null",
              "isPrivate": true
            },
            {
              "name": "bufferOverflowWarning",
              "isPrivate": true
            },
            {
              "name": "MAX_CONVERSATION_HISTORY",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "MAX_MEMORY_MB",
              "isPrivate": true,
              "isReadonly": true
            }
          ]
        }
      ],
      "constants": []
    },
    "src/files/filesystem.ts": {
      "imports": [
        {
          "from": "fs/promises",
          "kind": "import"
        },
        {
          "from": "path",
          "kind": "import"
        },
        {
          "from": "../utils/types.js",
          "kind": "import"
        },
        {
          "from": "../utils/errors.js",
          "kind": "import"
        }
      ],
      "dependencies": [
        "src/utils/errors.ts",
        "src/utils/types.ts"
      ],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "src/files/resolver.ts": {
      "imports": [
        {
          "from": "glob",
          "kind": "import",
          "imported": [
            "glob"
          ]
        },
        {
          "from": "fs/promises",
          "kind": "import",
          "isNamespace": true
        },
        {
          "from": "path",
          "kind": "import",
          "isNamespace": true
        },
        {
          "from": "ignore",
          "kind": "import",
          "isDefault": true
        },
        {
          "from": "lru-cache",
          "kind": "import",
          "imported": [
            "LRUCache"
          ]
        },
        {
          "from": "../utils/types.js",
          "kind": "import",
          "imported": [
            "Config",
            "FileSystemService",
            "ResolvedContent",
            "ContentBlock",
            "PathUtils"
          ]
        },
        {
          "from": "../utils/errors.js",
          "kind": "import",
          "imported": [
            "ErrorHandler"
          ]
        }
      ],
      "dependencies": [
        "src/utils/errors.ts",
        "src/utils/types.ts"
      ],
      "functions": [],
      "classes": [
        {
          "name": "FileResolver",
          "isExported": true,
          "methods": [
            {
              "name": "resolvePrompt",
              "params": [
                {
                  "name": "content",
                  "type": "ContentBlock[]"
                },
                {
                  "name": "signal",
                  "type": "AbortSignal"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<ResolvedContent[]>"
            },
            {
              "name": "resolvePath",
              "params": [
                {
                  "name": "filePath",
                  "type": "string"
                },
                {
                  "name": "signal",
                  "type": "AbortSignal",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<string>"
            },
            {
              "name": "findFiles",
              "params": [
                {
                  "name": "pattern",
                  "type": "string"
                },
                {
                  "name": "options",
                  "type": "FindOptions"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<string[]>"
            },
            {
              "name": "getFileInfo",
              "params": [
                {
                  "name": "filePath",
                  "type": "string"
                },
                {
                  "name": "signal",
                  "type": "AbortSignal",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<FileInfo>"
            },
            {
              "name": "isAccessible",
              "params": [
                {
                  "name": "filePath",
                  "type": "string"
                },
                {
                  "name": "operation",
                  "type": "'read' | 'write' | 'execute'"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<boolean>"
            },
            {
              "name": "safeReadFile",
              "params": [
                {
                  "name": "filePath",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<string>",
              "isPrivate": true
            },
            {
              "name": "globSearch",
              "params": [
                {
                  "name": "pattern",
                  "type": "string"
                },
                {
                  "name": "signal",
                  "type": "AbortSignal"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<string[]>",
              "isPrivate": true
            },
            {
              "name": "selectBestMatch",
              "params": [
                {
                  "name": "targetPath",
                  "type": "string"
                },
                {
                  "name": "matches",
                  "type": "string[]"
                }
              ],
              "isAsync": false,
              "returnType": "string",
              "isPrivate": true
            },
            {
              "name": "suggestSimilar",
              "params": [
                {
                  "name": "targetPath",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<string>",
              "isPrivate": true
            },
            {
              "name": "getGitignorePatterns",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<string[]>",
              "isPrivate": true
            },
            {
              "name": "getPathType",
              "params": [
                {
                  "name": "stats",
                  "type": "{ isFile(): boolean; isDirectory(): boolean; isSymbolicLink(): boolean }"
                }
              ],
              "isAsync": false,
              "returnType": "PathType",
              "isPrivate": true
            },
            {
              "name": "clearCache",
              "params": [],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "getCacheStats",
              "params": [],
              "isAsync": false,
              "returnType": "{ fileCache: { size: number; max: number; hitRate: number }; pathCache: { size: number; max: number } }"
            }
          ],
          "properties": [
            {
              "name": "cache",
              "isPrivate": true
            },
            {
              "name": "pathCache",
              "isPrivate": true
            },
            {
              "name": "gitignoreCache",
              "type": "{ patterns: string[]; timestamp: number } | null",
              "isPrivate": true
            },
            {
              "name": "GITIGNORE_CACHE_TTL",
              "isPrivate": true,
              "isReadonly": true
            }
          ]
        }
      ],
      "constants": []
    },
    "src/index.ts": {
      "imports": [
        {
          "from": "./bridge/agent.js",
          "kind": "import",
          "imported": [
            "ClaudeACPAgent"
          ]
        },
        {
          "from": "fs",
          "kind": "import",
          "isNamespace": true
        },
        {
          "from": "path",
          "kind": "import",
          "isNamespace": true
        },
        {
          "from": "./bridge/agent.js",
          "kind": "export"
        },
        {
          "from": "./protocol/connection.js",
          "kind": "export"
        },
        {
          "from": "./protocol/schemas.js",
          "kind": "export"
        }
      ],
      "dependencies": [
        "src/bridge/agent.ts",
        "src/protocol/connection.ts",
        "src/protocol/schemas.ts"
      ],
      "functions": [
        {
          "name": "getVersion",
          "params": [],
          "isAsync": false,
          "isExported": false,
          "returnType": "string"
        },
        {
          "name": "validateEnvironment",
          "params": [],
          "isAsync": false,
          "isExported": false,
          "returnType": "void"
        },
        {
          "name": "parseArgs",
          "params": [
            {
              "name": "argv",
              "type": "string[]"
            }
          ],
          "isAsync": false,
          "isExported": false,
          "returnType": "CLIOptions"
        },
        {
          "name": "showVersion",
          "params": [],
          "isAsync": false,
          "isExported": false,
          "returnType": "void"
        },
        {
          "name": "showHelp",
          "params": [],
          "isAsync": false,
          "isExported": false,
          "returnType": "void"
        },
        {
          "name": "main",
          "params": [],
          "isAsync": true,
          "isExported": false,
          "returnType": "Promise<void>"
        }
      ],
      "classes": [],
      "constants": [
        {
          "name": "VERSION",
          "initKind": "unknown",
          "isExported": false
        }
      ]
    },
    "src/protocol/connection.ts": {
      "imports": [
        {
          "from": "../utils/errors.js",
          "kind": "import",
          "imported": [
            "ErrorCodes"
          ]
        }
      ],
      "dependencies": [
        "src/utils/errors.ts"
      ],
      "functions": [],
      "classes": [
        {
          "name": "Connection",
          "isExported": true,
          "methods": [
            {
              "name": "debugLog",
              "params": [
                {
                  "name": "args",
                  "type": "unknown[]",
                  "rest": true
                }
              ],
              "isAsync": false,
              "returnType": "void",
              "isPrivate": true
            },
            {
              "name": "receive",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "processMessage",
              "params": [
                {
                  "name": "message",
                  "type": "AnyMessage | IncompleteMessage"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "handleRequest",
              "params": [
                {
                  "name": "request",
                  "type": "JsonRpcRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "handleNotification",
              "params": [
                {
                  "name": "notification",
                  "type": "JsonRpcNotification"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "handleResponse",
              "params": [
                {
                  "name": "response",
                  "type": "JsonRpcResponse"
                }
              ],
              "isAsync": false,
              "returnType": "void",
              "isPrivate": true
            },
            {
              "name": "tryCallHandler",
              "params": [
                {
                  "name": "method",
                  "type": "string"
                },
                {
                  "name": "params",
                  "type": "unknown",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<{ result?: unknown } | { error: JsonRpcError }>",
              "isPrivate": true
            },
            {
              "name": "formatError",
              "params": [
                {
                  "name": "error",
                  "type": "unknown"
                }
              ],
              "isAsync": false,
              "returnType": "JsonRpcError",
              "isPrivate": true
            },
            {
              "name": "sendErrorResponse",
              "params": [
                {
                  "name": "id",
                  "type": "string | number"
                },
                {
                  "name": "code",
                  "type": "number"
                },
                {
                  "name": "message",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "unknown",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "sendMessage",
              "params": [
                {
                  "name": "message",
                  "type": "unknown"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "flushMessageQueue",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "sendRequest",
              "params": [
                {
                  "name": "method",
                  "type": "string"
                },
                {
                  "name": "params",
                  "type": "unknown",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<T>"
            },
            {
              "name": "sendNotification",
              "params": [
                {
                  "name": "method",
                  "type": "string"
                },
                {
                  "name": "params",
                  "type": "unknown",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>"
            },
            {
              "name": "close",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<void>"
            }
          ],
          "properties": [
            {
              "name": "pendingResponses",
              "isPrivate": true
            },
            {
              "name": "nextRequestId",
              "isPrivate": true
            },
            {
              "name": "writeQueue",
              "type": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "closed",
              "isPrivate": true
            },
            {
              "name": "options",
              "type": "Required<ConnectionOptions>",
              "isPrivate": true
            },
            {
              "name": "messageQueue",
              "type": "unknown[]",
              "isPrivate": true
            },
            {
              "name": "batchTimer",
              "type": "NodeJS.Timeout | null",
              "isPrivate": true
            },
            {
              "name": "BATCH_SIZE",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "BATCH_DELAY",
              "isPrivate": true,
              "isReadonly": true
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "JSON_RPC_ERROR_CODES",
          "initKind": "unknown",
          "isExported": true
        }
      ]
    },
    "src/protocol/schemas.ts": {
      "imports": [
        {
          "from": "zod",
          "kind": "import",
          "imported": [
            "z"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": [
        {
          "name": "roleSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolKindSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolCallStatusSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "textResourceContentsSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "blobResourceContentsSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "embeddedResourceResourceSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "annotationsSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "contentBlockSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolCallContentSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolCallLocationSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "planEntrySchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "sessionUpdateSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "fileSystemCapabilitySchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "clientCapabilitiesSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "promptCapabilitiesSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "authMethodSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "agentCapabilitiesSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "envVariableSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "mcpServerSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "permissionOptionSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "toolCallUpdateSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "initializeRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "initializeResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "authenticateRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "authenticateResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "newSessionRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "loadSessionRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "loadSessionResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "newSessionResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "promptRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "promptResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "cancelNotificationSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "requestPermissionRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "requestPermissionResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "readTextFileRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "readTextFileResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "writeTextFileRequestSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "writeTextFileResponseSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "sessionNotificationSchema",
          "initKind": "unknown",
          "isExported": true
        }
      ]
    },
    "src/utils/errors.ts": {
      "imports": [
        {
          "from": "zod",
          "kind": "import",
          "imported": [
            "z"
          ]
        }
      ],
      "dependencies": [],
      "functions": [
        {
          "name": "formatErrorForLogging",
          "params": [
            {
              "name": "error",
              "type": "unknown"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "string"
        },
        {
          "name": "isACPError",
          "params": [
            {
              "name": "obj",
              "type": "unknown"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "obj is ACPError"
        }
      ],
      "classes": [
        {
          "name": "ClaudeSDKError",
          "isExported": true,
          "methods": [],
          "properties": [],
          "extends": "Error"
        },
        {
          "name": "ErrorLogger",
          "isExported": true,
          "methods": [
            {
              "name": "getInstance",
              "params": [],
              "isAsync": false,
              "returnType": "ErrorLogger",
              "isStatic": true
            },
            {
              "name": "generateCorrelationId",
              "params": [],
              "isAsync": false,
              "returnType": "string"
            },
            {
              "name": "formatLogMessage",
              "params": [
                {
                  "name": "level",
                  "type": "LogLevel"
                },
                {
                  "name": "message",
                  "type": "string"
                },
                {
                  "name": "error",
                  "type": "ACPError",
                  "optional": true
                },
                {
                  "name": "metadata",
                  "type": "Record<string, unknown>",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "string",
              "isPrivate": true
            },
            {
              "name": "logError",
              "params": [
                {
                  "name": "message",
                  "type": "string"
                },
                {
                  "name": "error",
                  "type": "ACPError",
                  "optional": true
                },
                {
                  "name": "metadata",
                  "type": "Record<string, unknown>",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "logWarning",
              "params": [
                {
                  "name": "message",
                  "type": "string"
                },
                {
                  "name": "error",
                  "type": "ACPError",
                  "optional": true
                },
                {
                  "name": "metadata",
                  "type": "Record<string, unknown>",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "logInfo",
              "params": [
                {
                  "name": "message",
                  "type": "string"
                },
                {
                  "name": "metadata",
                  "type": "Record<string, unknown>",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "logDebug",
              "params": [
                {
                  "name": "message",
                  "type": "string"
                },
                {
                  "name": "metadata",
                  "type": "Record<string, unknown>",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "log",
              "params": [
                {
                  "name": "level",
                  "type": "LogLevel"
                },
                {
                  "name": "message",
                  "type": "string"
                },
                {
                  "name": "error",
                  "type": "ACPError",
                  "optional": true
                },
                {
                  "name": "metadata",
                  "type": "Record<string, unknown>",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "void"
            }
          ],
          "properties": [
            {
              "name": "instance",
              "type": "ErrorLogger",
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "correlationIdCounter",
              "isPrivate": true
            }
          ]
        },
        {
          "name": "RetryHandler",
          "isExported": true,
          "methods": [
            {
              "name": "isRetryableError",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                }
              ],
              "isAsync": false,
              "returnType": "boolean",
              "isStatic": true,
              "isPrivate": true
            },
            {
              "name": "calculateDelay",
              "params": [
                {
                  "name": "attempt",
                  "type": "number"
                }
              ],
              "isAsync": false,
              "returnType": "number",
              "isPrivate": true
            },
            {
              "name": "executeWithRetry",
              "params": [
                {
                  "name": "operation",
                  "type": "() => Promise<T>"
                },
                {
                  "name": "operationName"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<T>"
            },
            {
              "name": "sleep",
              "params": [
                {
                  "name": "ms",
                  "type": "number"
                }
              ],
              "isAsync": false,
              "returnType": "Promise<void>",
              "isPrivate": true
            },
            {
              "name": "createPolicy",
              "params": [
                {
                  "name": "overrides",
                  "type": "Partial<RetryPolicy>"
                }
              ],
              "isAsync": false,
              "returnType": "RetryPolicy",
              "isStatic": true
            }
          ],
          "properties": [
            {
              "name": "DEFAULT_POLICY",
              "type": "RetryPolicy",
              "isStatic": true,
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "logger",
              "isPrivate": true
            }
          ]
        },
        {
          "name": "TimeoutHandler",
          "isExported": true,
          "methods": [
            {
              "name": "withTimeout",
              "params": [
                {
                  "name": "promise",
                  "type": "Promise<T>"
                },
                {
                  "name": "timeoutMs",
                  "type": "number"
                },
                {
                  "name": "operationName"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<T>"
            },
            {
              "name": "createTimeoutPromise",
              "params": [
                {
                  "name": "timeoutMs",
                  "type": "number"
                }
              ],
              "isAsync": false,
              "returnType": "Promise<T>"
            }
          ],
          "properties": [
            {
              "name": "logger",
              "isPrivate": true
            }
          ]
        },
        {
          "name": "ErrorHandler",
          "isExported": true,
          "methods": [
            {
              "name": "handle",
              "params": [
                {
                  "name": "error",
                  "type": "unknown"
                }
              ],
              "isAsync": false,
              "returnType": "ACPError",
              "isStatic": true
            },
            {
              "name": "createACPError",
              "params": [
                {
                  "name": "code",
                  "type": "number"
                },
                {
                  "name": "message",
                  "type": "string"
                },
                {
                  "name": "data",
                  "type": "ErrorData",
                  "optional": true
                }
              ],
              "isAsync": false,
              "returnType": "ACPError",
              "isStatic": true
            },
            {
              "name": "isRetryableError",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                }
              ],
              "isAsync": false,
              "returnType": "boolean",
              "isStatic": true
            }
          ],
          "properties": []
        },
        {
          "name": "ErrorRecovery",
          "isExported": true,
          "methods": [
            {
              "name": "registerStrategy",
              "params": [
                {
                  "name": "strategy",
                  "type": "RecoveryStrategy"
                }
              ],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "recover",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                },
                {
                  "name": "context",
                  "type": "RecoveryContext",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<RecoveryResult>"
            }
          ],
          "properties": [
            {
              "name": "strategies",
              "type": "RecoveryStrategy[]",
              "isPrivate": true
            },
            {
              "name": "logger",
              "isPrivate": true
            }
          ]
        },
        {
          "name": "RateLimitRecoveryStrategy",
          "isExported": false,
          "methods": [
            {
              "name": "canHandle",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                }
              ],
              "isAsync": false,
              "returnType": "boolean"
            },
            {
              "name": "execute",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                },
                {
                  "name": "context",
                  "type": "RecoveryContext",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<RecoveryResult>"
            }
          ],
          "properties": [
            {
              "name": "name"
            }
          ],
          "implements": [
            "RecoveryStrategy"
          ]
        },
        {
          "name": "AuthErrorRecoveryStrategy",
          "isExported": false,
          "methods": [
            {
              "name": "canHandle",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                }
              ],
              "isAsync": false,
              "returnType": "boolean"
            },
            {
              "name": "execute",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                },
                {
                  "name": "context",
                  "type": "RecoveryContext",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<RecoveryResult>"
            }
          ],
          "properties": [
            {
              "name": "name"
            }
          ],
          "implements": [
            "RecoveryStrategy"
          ]
        },
        {
          "name": "NetworkErrorRecoveryStrategy",
          "isExported": false,
          "methods": [
            {
              "name": "canHandle",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                }
              ],
              "isAsync": false,
              "returnType": "boolean"
            },
            {
              "name": "execute",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                },
                {
                  "name": "context",
                  "type": "RecoveryContext",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<RecoveryResult>"
            }
          ],
          "properties": [
            {
              "name": "name"
            }
          ],
          "implements": [
            "RecoveryStrategy"
          ]
        },
        {
          "name": "FileSystemErrorRecoveryStrategy",
          "isExported": false,
          "methods": [
            {
              "name": "canHandle",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                }
              ],
              "isAsync": false,
              "returnType": "boolean"
            },
            {
              "name": "execute",
              "params": [
                {
                  "name": "error",
                  "type": "ACPError"
                },
                {
                  "name": "context",
                  "type": "RecoveryContext",
                  "optional": true
                }
              ],
              "isAsync": true,
              "returnType": "Promise<RecoveryResult>"
            }
          ],
          "properties": [
            {
              "name": "name"
            }
          ],
          "implements": [
            "RecoveryStrategy"
          ]
        }
      ],
      "constants": [
        {
          "name": "ErrorMessageSchema",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "JSON_RPC_ERRORS",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "ACP_ERRORS",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "ErrorCodes",
          "initKind": "unknown",
          "isExported": true
        }
      ]
    },
    "src/utils/path.ts": {
      "imports": [
        {
          "from": "path",
          "kind": "import",
          "isNamespace": true
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [],
      "constants": []
    },
    "src/utils/performance.ts": {
      "imports": [
        {
          "from": "lru-cache",
          "kind": "import",
          "imported": [
            "LRUCache"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [
        {
          "name": "PerformanceMonitor",
          "isExported": true,
          "methods": [
            {
              "name": "recordRequest",
              "params": [
                {
                  "name": "responseTime",
                  "type": "number"
                },
                {
                  "name": "isError"
                }
              ],
              "isAsync": false,
              "returnType": "void"
            },
            {
              "name": "getMetrics",
              "params": [],
              "isAsync": false,
              "returnType": "PerformanceMetrics"
            },
            {
              "name": "checkPerformanceTargets",
              "params": [],
              "isAsync": false,
              "returnType": "PerformanceCheck"
            },
            {
              "name": "recordMemoryAlert",
              "params": [],
              "isAsync": false,
              "returnType": "void"
            }
          ],
          "properties": [
            {
              "name": "startTime",
              "isPrivate": true
            },
            {
              "name": "metrics",
              "isPrivate": true
            }
          ]
        },
        {
          "name": "MemoryManager",
          "isExported": true,
          "methods": [
            {
              "name": "checkMemoryUsage",
              "params": [],
              "isAsync": false,
              "returnType": "MemoryStatus"
            },
            {
              "name": "triggerGarbageCollection",
              "params": [],
              "isAsync": false,
              "returnType": "boolean",
              "isPrivate": true
            },
            {
              "name": "getMemoryStats",
              "params": [],
              "isAsync": false,
              "returnType": "NodeJS.MemoryUsage & { gcAvailable: boolean }"
            }
          ],
          "properties": [
            {
              "name": "MAX_MEMORY_MB",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "lastGCTime",
              "isPrivate": true
            },
            {
              "name": "GC_COOLDOWN",
              "isPrivate": true,
              "isReadonly": true
            }
          ]
        },
        {
          "name": "StreamBuffer",
          "isExported": true,
          "methods": [
            {
              "name": "push",
              "params": [
                {
                  "name": "item",
                  "type": "T"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>"
            },
            {
              "name": "flush",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<void>"
            },
            {
              "name": "getStats",
              "params": [],
              "isAsync": false,
              "returnType": "{ size: number; maxSize: number; hasTimer: boolean }"
            },
            {
              "name": "dispose",
              "params": [],
              "isAsync": true,
              "returnType": "Promise<void>"
            }
          ],
          "properties": [
            {
              "name": "buffer",
              "type": "T[]",
              "isPrivate": true
            },
            {
              "name": "flushTimer",
              "type": "NodeJS.Timeout | null",
              "isPrivate": true
            },
            {
              "name": "bufferSize",
              "type": "number",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "flushInterval",
              "type": "number",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "flushCallback",
              "type": "(items: T[]) => Promise<void>",
              "isPrivate": true,
              "isReadonly": true
            }
          ]
        },
        {
          "name": "RateLimiter",
          "isExported": true,
          "methods": [
            {
              "name": "isAllowed",
              "params": [],
              "isAsync": false,
              "returnType": "boolean"
            },
            {
              "name": "getTimeUntilReset",
              "params": [],
              "isAsync": false,
              "returnType": "number"
            }
          ],
          "properties": [
            {
              "name": "requests",
              "type": "number[]",
              "isPrivate": true
            },
            {
              "name": "maxRequests",
              "type": "number",
              "isPrivate": true,
              "isReadonly": true
            },
            {
              "name": "windowMs",
              "type": "number",
              "isPrivate": true,
              "isReadonly": true
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "globalPerformanceMonitor",
          "initKind": "unknown",
          "isExported": true
        },
        {
          "name": "globalMemoryManager",
          "initKind": "unknown",
          "isExported": true
        }
      ]
    },
    "src/utils/types.ts": {
      "imports": [
        {
          "from": "node:stream/web",
          "kind": "import",
          "imported": [
            "ReadableStream",
            "WritableStream"
          ]
        },
        {
          "from": "zod",
          "kind": "import",
          "imported": [
            "z"
          ]
        },
        {
          "from": "../protocol/schemas.js",
          "kind": "import",
          "imported": [
            "ContentBlock",
            "PermissionOption",
            "SessionUpdate",
            "ToolCallUpdate",
            "McpServer"
          ]
        },
        {
          "from": "./errors.js",
          "kind": "import",
          "imported": [
            "LogLevel",
            "ACPError"
          ]
        },
        {
          "from": "../protocol/schemas.js",
          "kind": "export",
          "imported": [
            "ContentBlock"
          ]
        },
        {
          "from": "../protocol/schemas.js",
          "kind": "export",
          "imported": [
            "PermissionOption"
          ]
        },
        {
          "from": "../protocol/schemas.js",
          "kind": "export",
          "imported": [
            "SessionUpdate"
          ]
        },
        {
          "from": "./errors.js",
          "kind": "export",
          "imported": [
            "LogLevel"
          ]
        },
        {
          "from": "./path.js",
          "kind": "export",
          "imported": [
            "PathUtils"
          ]
        }
      ],
      "dependencies": [
        "src/protocol/schemas.ts",
        "src/utils/errors.ts",
        "src/utils/path.ts"
      ],
      "functions": [
        {
          "name": "createResult",
          "params": [
            {
              "name": "data",
              "type": "T"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "Result<T>"
        },
        {
          "name": "createError",
          "params": [
            {
              "name": "error",
              "type": "E"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "Result<never, E>"
        },
        {
          "name": "createACPError",
          "params": [
            {
              "name": "code",
              "type": "number"
            },
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "data",
              "type": "ACPError['data']",
              "optional": true
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "Result<never, ACPError>"
        },
        {
          "name": "isSuccess",
          "params": [
            {
              "name": "result",
              "type": "Result<T, E>"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "result is { success: true; data: T }"
        },
        {
          "name": "isError",
          "params": [
            {
              "name": "result",
              "type": "Result<T, E>"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "result is { success: false; error: E }"
        },
        {
          "name": "validateWithSchema",
          "params": [
            {
              "name": "schema",
              "type": "z.ZodSchema<T>"
            },
            {
              "name": "data",
              "type": "unknown"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "Result<T, ACPError>"
        },
        {
          "name": "safeParseWithResult",
          "params": [
            {
              "name": "schema",
              "type": "z.ZodSchema<T>"
            },
            {
              "name": "data",
              "type": "unknown"
            }
          ],
          "isAsync": false,
          "isExported": true,
          "returnType": "Result<T, ACPError>"
        },
        {
          "name": "createValidator",
          "params": [
            {
              "name": "schema",
              "type": "z.ZodSchema<T>"
            }
          ],
          "isAsync": false,
          "isExported": true
        }
      ],
      "classes": [],
      "constants": []
    },
    "tests/integration/protocol.test.ts": {
      "imports": [
        {
          "from": "crypto",
          "kind": "import",
          "imported": [
            "randomUUID"
          ]
        },
        {
          "from": "stream",
          "kind": "import",
          "imported": [
            "Readable",
            "Writable"
          ]
        }
      ],
      "dependencies": [],
      "functions": [],
      "classes": [
        {
          "name": "ClaudeACPBridge",
          "isExported": false,
          "methods": [
            {
              "name": "initialize",
              "params": [
                {
                  "name": "params",
                  "type": "InitializeRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<InitializeResponse>"
            },
            {
              "name": "newSession",
              "params": [
                {
                  "name": "params",
                  "type": "NewSessionRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<SessionResponse>"
            },
            {
              "name": "prompt",
              "params": [
                {
                  "name": "params",
                  "type": "PromptRequest"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<PromptResponse>"
            },
            {
              "name": "resolveFile",
              "params": [
                {
                  "name": "path",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<string>",
              "isPrivate": true
            },
            {
              "name": "closeSession",
              "params": [
                {
                  "name": "sessionId",
                  "type": "string"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<void>"
            },
            {
              "name": "executeTool",
              "params": [
                {
                  "name": "sessionId",
                  "type": "string"
                },
                {
                  "name": "tool",
                  "type": "MockToolCall"
                }
              ],
              "isAsync": true,
              "returnType": "Promise<{ result: string }>"
            },
            {
              "name": "setPermissionHandler",
              "params": [
                {
                  "name": "handler",
                  "type": "jest.Mock"
                }
              ],
              "isAsync": false
            },
            {
              "name": "simulateNetworkError",
              "params": [],
              "isAsync": false
            },
            {
              "name": "clearNetworkError",
              "params": [],
              "isAsync": false
            },
            {
              "name": "simulateRateLimit",
              "params": [],
              "isAsync": false
            },
            {
              "name": "clearRateLimit",
              "params": [],
              "isAsync": false
            },
            {
              "name": "getSessionCount",
              "params": [],
              "isAsync": false,
              "returnType": "number"
            },
            {
              "name": "getFileCount",
              "params": [],
              "isAsync": false,
              "returnType": "number"
            }
          ],
          "properties": [
            {
              "name": "sessions",
              "type": "Map<string, { id: string; cwd: string; lastUsed: Date }>",
              "isPrivate": true
            },
            {
              "name": "permissionHandler",
              "type": "jest.Mock",
              "isPrivate": true
            },
            {
              "name": "permissionCache",
              "type": "Map<string, MockPermissionDecision>",
              "isPrivate": true
            },
            {
              "name": "initialized",
              "isPrivate": true
            },
            {
              "name": "networkError",
              "isPrivate": true
            },
            {
              "name": "rateLimited",
              "isPrivate": true
            },
            {
              "name": "files",
              "type": "Map<string, string>",
              "isPrivate": true
            }
          ]
        }
      ],
      "constants": [
        {
          "name": "UUID_REGEX",
          "initKind": "unknown",
          "isExported": false
        },
        {
          "name": "mockTool",
          "initKind": "object",
          "isExported": false
        }
      ]
    }
  }
}